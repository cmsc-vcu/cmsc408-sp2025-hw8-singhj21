---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-singhj21>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
where
  country_region = '' or country_region is null
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
# drop table if exists
execute_ddl(cnx,"""
drop table if exists wdi_country_countries_only;
""")
```

```{python}
# create table with countries only
execute_ddl(cnx,"""
create table wdi_country_countries_only as
select *
from world_bank_data.wdi_country
where country_region is not null and country_region <> '';
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  wdi_country_countries_only
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Number of Countries"
from
  wdi_country_countries_only
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct
  country_region
from
  wdi_country_countries_only
order by
  country_region
""")


```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  country_region,
  count(*) as "Number of Countries"
from
  wdi_country_countries_only
group by
  country_region
order by
  "Number of Countries" desc
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  country_full_name,
  country_region
from
  wdi_country_countries_only
where
  country_region = 'North America'
order by
  country_full_name
""")


```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  country_region,
  country_short_name,
  country_full_name
from
  wdi_country_countries_only
where
  country_short_name = 'Qatar'
""")


```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  country_code,
  country_short_name,
  country_abbr,
  country_wb_abbr,
  country_region
from
  wdi_country_countries_only
where
  country_abbr <> country_wb_abbr
order by
  country_short_name
""")


```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  country_income_group,
  count(*) as "Number of Countries"
from
  wdi_country_countries_only
group by
  country_income_group
order by
  "Number of Countries" desc
""")


```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select
  country_short_name
from
  wdi_country_countries_only
where
  country_income_group is null or country_income_group = ''
order by
  country_short_name
""")


```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

# Assume the country you found in Task 12 should be "High income"
execute_ddl(cnx,"""
update wdi_country_countries_only
set country_income_group = 'High income'
where
  country_short_name = 'Kuwait'; -- (example country, adjust if needed)
""")


```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select
  country_short_name,
  country_income_group
from
  wdi_country_countries_only
where
  country_short_name = 'Kuwait'
""")


```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  country_region,
  country_income_group,
  count(*) as "Number of Countries"
from
  wdi_country_countries_only
group by
  country_region, country_income_group
order by
  country_region, country_income_group
""")


```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select
  country_region,
  sum(case when country_income_group = 'High income' then 1 else 0 end) as "High",
  sum(case when country_income_group = 'Upper middle income' then 1 else 0 end) as "Upper Middle",
  sum(case when country_income_group = 'Lower middle income' then 1 else 0 end) as "Lower Middle",
  sum(case when country_income_group = 'Low income' then 1 else 0 end) as "Low",
  sum(case when country_income_group not in ('High income','Upper middle income','Lower middle income','Low income') or country_income_group is null then 1 else 0 end) as "Other",
  count(*) as "Total"
from
  wdi_country_countries_only
group by
  country_region
order by
  country_region
""")


```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Low Income Countries",
  country_region,
  country_income_group
from
  wdi_country_countries_only
where
  country_income_group = 'Low income'
group by
  country_region, country_income_group
order by
  "Low Income Countries" desc
limit 1
""")


```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select
  country_code,
  country_short_name,
  country_region,
  country_income_group
from
  wdi_country_countries_only
where
  country_region = (select country_region from wdi_country_countries_only where country_code = 'MHL')
  and country_income_group = (select country_income_group from wdi_country_countries_only where country_code = 'MHL')
order by
  country_short_name
""")


```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
with regions as (
  select distinct country_region
  from wdi_country_countries_only
),
incomes as (
  select distinct country_income_group
  from wdi_country_countries_only
),
all_combinations as (
  select
    r.country_region,
    i.country_income_group
  from
    regions r
  cross join
    incomes i
),
existing_combinations as (
  select distinct
    country_region,
    country_income_group
  from
    wdi_country_countries_only
)
select
  ac.country_region,
  ac.country_income_group
from
  all_combinations ac
left join
  existing_combinations ec
on
  ac.country_region = ec.country_region and ac.country_income_group = ec.country_income_group
where
  ec.country_region is null
order by
  ac.country_region, ac.country_income_group
""")


```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)
run_sql_and_return_html(cnx,"""
with base as (
  select
    country_region,
    country_income_group,
    count(*) as num_countries
  from
    wdi_country_countries_only
  group by
    country_region, country_income_group
),
totals as (
  select
    sum(num_countries) as total_countries
  from
    base
)
select
  base.country_region,
  base.country_income_group,
  base.num_countries,
  (select sum(num_countries) from base b2 where b2.country_region = base.country_region) as region_total,
  (select sum(num_countries) from base b3 where b3.country_income_group = base.country_income_group) as income_total,
  totals.total_countries,
  round(base.num_countries * 100.0 / totals.total_countries, 2) as pct_total
from
  base, totals
order by
  base.country_region, base.country_income_group
""")

```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
with base as (
  select
    country_region,
    country_income_group,
    count(*) as num_countries
  from
    wdi_country_countries_only
  group by
    country_region, country_income_group
),
totals as (
  select
    sum(num_countries) as total_countries
  from base
)
select
  country_region,
  round(sum(case when country_income_group = 'High income' then num_countries end) * 100.0 / (select total_countries from totals), 2) as "High %",
  round(sum(case when country_income_group = 'Upper middle income' then num_countries end) * 100.0 / (select total_countries from totals), 2) as "Upper Middle %",
  round(sum(case when country_income_group = 'Lower middle income' then num_countries end) * 100.0 / (select total_countries from totals), 2) as "Lower Middle %",
  round(sum(case when country_income_group = 'Low income' then num_countries end) * 100.0 / (select total_countries from totals), 2) as "Low %",
  round(sum(case when (country_income_group not in ('High income','Upper middle income','Lower middle income','Low income') or country_income_group is null) then num_countries end) * 100.0 / (select total_countries from totals), 2) as "Other %",
  round(sum(num_countries) * 100.0 / (select total_countries from totals), 2) as "Total %"
from
  base
group by
  country_region
order by
  country_region
""")


```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
select
  country_income_group,
  count(*) as "Number of Countries"
from
  wdi_country_countries_only
group by
  country_income_group
order by
  "Number of Countries" desc
""")


```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

- In this assignment, I used a wide range of SQL skills, including basic commands like SELECT, WHERE, ORDER BY, and GROUP BY, as well as more advanced techniques such as Common Table Expressions (CTEs), pivoting data using CASE WHEN statements, and performing data corrections with UPDATE. I feel most confident in using simple SELECT queries, filtering records with WHERE conditions, and aggregating results with GROUP BY and COUNT. These skills have become second nature through repeated practice in this assignment.

However, I realized I need more practice working with more complex joins and subqueries, especially when it comes to finding missing combinations (as in Task 18) or calculating dynamic percentages (as in Tasks 19 and 20). Crafting CTEs correctly and understanding how different temporary tables interact was initially challenging but became easier after experimenting with simple examples first.

Overall, this assignment reinforced my ability to think step-by-step when solving SQL problems. It also helped me learn how to write queries that are both functional and readable, which is critical when working on real-world datasets that can be very large and complex.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

- For the more complex tasks, I found it essential to break the problems down into smaller, more manageable parts before attempting to write the final query. For example, in Task 18, I first separately identified the list of all distinct regions and the list of all income categories, and only then thought about how to create all possible combinations using a cross join. By tackling each part individually, I could test small queries one at a time and avoid overwhelming myself.

Whenever I encountered challenges, especially when queries became very nested or when error messages appeared, I would simplify the query back down to the basic elements to see where things were breaking. I also used online documentation and SQL syntax examples to guide me when I was unsure about the exact structure of CTEs or joins.

In the future, for complex queries, I would spend more time sketching out the logical steps and relationships on paper or in a flowchart before typing anything. Having a clear visual of what I want the query to achieve would save time and reduce confusion. I would also try to comment my code more heavily to keep track of each step inside longer queries.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

- The biggest takeaway from this assignment is realizing how powerful SQL can be not just for retrieving data, but for completely reshaping and analyzing it. Before this assignment, I mostly thought of SQL as a way to run simple queries. Now, I understand that SQL can be used to build complex analytical workflows, perform percentage calculations, identify missing data, and generate fully pivoted, human-readable reports — all without needing a programming language like Python.

Another important learning point was appreciating how important data cleaning and validation are. Tasks like correcting inconsistent income categories and detecting missing region-income pairs showed me that good data analysis starts with making sure your dataset is clean and consistent.

In real-world scenarios, these skills will be essential for any data analyst, database developer, or even cybersecurity professional working with incident or event logs. I feel more prepared to work with large, messy datasets, think critically about data quality, and write queries that tell a clear story with the data. These skills will definitely help me in future coursework, internships, and professional projects that involve real-world databases.


# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

